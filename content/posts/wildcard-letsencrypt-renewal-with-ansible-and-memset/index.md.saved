---
title: "Wildcard LetsEncrypt renewal with Ansible and Memset"
date: "2018-08-07"
categories: 
  - "ansible"
  - "automation"
  - "letsencrypt"
---

# Obtaining a wildcard LetsEncrypt cert with Ansible

Earlier this year, LetsEncrypt made their wildcard x509 certificates available to the general public. Whilst this is a massive step forward over individual certificates for each domain, it does come with the overhead of having to distribute the wildcard certificate to the (possibly many) places you would use it. Ignoring that issue for now, I wrote a quick Ansible playbook which uses the `dns-01` challenge method and my Memset DNS management modules (available in Ansible 2.6+) to provide the verification.

Without further ado:

```
\---
- hosts: localhost
  gather\_facts: no

  vars:
    tmpdir: "/tmp/le/"
    account\_key: "le-account-key.pem"
    keyname: "star-domain-com-key.pem"
    csrname: "star-domain-com.csr"
    certname: "star-domain-com.pem"
    fullchain: "star-domain-com-fullchain.pem"
    common\_name: "\*.domain.com"

  tasks:
  - name: localhost | create temp dir
    file:
      path: "{{ tmpdir }}"
      state: directory

  - name: localhost | create temp account key
    openssl\_privatekey:
      path: "{{ tmpdir }}{{ account\_key }}"

  - name: localhost | create private key
    openssl\_privatekey:
      path: "{{ tmpdir }}{{ keyname }}"

  - name: localhost | create CSR
    openssl\_csr:
      path: "{{ tmpdir }}{{ csrname }}"
      privatekey\_path: "{{ tmpdir }}{{ keyname }}"
      common\_name: "{{ common\_name }}"
      country\_name: GB
      organization\_name: my-OU
      email\_address: ops@domain.com

  - name: LetsEncrypt | submit request
    acme\_certificate:
      account\_key\_src: "{{ tmpdir }}{{ account\_key }}"
      account\_email: me@domain.com
      src: "{{ tmpdir }}{{ csrname }}"
      fullchain\_dest: "{{ tmpdir }}{{ certname }}"
      challenge: dns-01
      acme\_directory: https://acme-staging-v02.api.letsencrypt.org/directory
      acme\_version: 2
      terms\_agreed: yes
      remaining\_days: 60
    register: challenge

  - name: Memset | create DNS challenge record
    memset\_zone\_record:
      api\_key: "{{ memset\_dns\_api\_key }}"
      state: present
      zone: domain.com
      type: TXT
      record: "{{ challenge\['challenge\_data'\]\['\*.domain.com'\]\['dns-01'\]\['resource'\] }}"
      data: "{{ challenge\['challenge\_data'\]\['\*.domain.com'\]\['dns-01'\]\['resource\_value'\] }}"

  - name: Memset | request DNS reload
    memset\_dns\_reload:
      api\_key: "{{ memset\_dns\_api\_key }}"
      poll: true

  - name: LetsEncrypt | retrieve cert
    acme\_certificate:
      account\_key\_src: "{{ tmpdir }}{{ account\_key }}"
      account\_email: me@domain.com
      src: "{{ tmpdir }}{{ csrname }}"
      dest: "{{ tmpdir }}{{ certname }}"
      fullchain\_dest: "{{ tmpdir }}{{ fullchain }}"
      challenge: dns-01
      acme\_directory: https://acme-staging-v02.api.letsencrypt.org/directory
      acme\_version: 2
      terms\_agreed: yes
      remaining\_days: 60
      data: "{{ challenge }}"
    register: cert\_retrieval

  - name: Memset | delete DNS challenge record
    memset\_zone\_record:
      api\_key: "{{ memset\_dns\_api\_key }}"
      state: absent
      zone: domain.com
      type: TXT
      record: "{{ challenge\['challenge\_data'\]\['\*.domain.com'\]\['dns-01'\]\['resource'\] }}"
      data: "{{ challenge\['challenge\_data'\]\['\*.domain.com'\]\['dns-01'\]\['resource\_value'\] }}"
    when: cert\_retrieval is changed

  - name: localhost | remove the account key
    file:
      path: "{{ tmpdir }}{{ account\_key }}"
      state: absent
    when: cert\_retrieval is changed
```

## Points to note

I've deliberately used the staging endpoint provided by LetsEncrypt; the certs this issues won't be valid for use but it allows you to test your playbook without hitting the [account rate limits](https://letsencrypt.org/docs/rate-limits/).

The last two tasks cleanup the account key and DNS challenge record, but only if the certificate was successfully issued.

## Testing

```
$ openssl x509 -in star-domain-com.pem -noout -text | grep "Subject: CN"
        Subject: CN = \*.domain.com
```

There we have it; one wildcard certificate from LetsEncrypt!
