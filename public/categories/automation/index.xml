<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>automation on Dicking with Docker</title>
    <link>https://dickingwithdocker.com/categories/automation/</link>
    <description>Recent content in automation on Dicking with Docker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://dickingwithdocker.com/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wildcard LetsEncrypt renewal with Ansible and Memset</title>
      <link>https://dickingwithdocker.com/posts/wildcard-letsencrypt-renewal-with-ansible-and-memset/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dickingwithdocker.com/posts/wildcard-letsencrypt-renewal-with-ansible-and-memset/</guid>
      <description>Obtaining a wildcard LetsEncrypt cert with Ansible Earlier this year, LetsEncrypt made their wildcard x509 certificates available to the general public. Whilst this is a massive step forward over individual certificates for each domain, it does come with the overhead of having to distribute the wildcard certificate to the (possibly many) places you would use it. Ignoring that issue for now, I wrote a quick Ansible playbook which uses the dns-01 challenge method and my Memset DNS management modules (available in Ansible 2.</description>
    </item>
    
    <item>
      <title>Ansible module development gotchas</title>
      <link>https://dickingwithdocker.com/posts/ansible-module-development-gotchas/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://dickingwithdocker.com/posts/ansible-module-development-gotchas/</guid>
      <description>Lessons I learnt whilst developing modules Having now spent quite some time working on my initial Ansible modules for Memset, I&amp;rsquo;ve assembled some handy hints on areas which tripped me up at various times in my journey.
It should be noted that this post is written from the point of view of someone who is not a developer and is therefore not as au fait with some of the processes mentioned as others may be.</description>
    </item>
    
    <item>
      <title>Deploying Kubernetes on VMs with Kubespray</title>
      <link>https://dickingwithdocker.com/posts/deploying-kubernetes-vms-kubespray/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dickingwithdocker.com/posts/deploying-kubernetes-vms-kubespray/</guid>
      <description>All the choices So you&amp;rsquo;re looking to start using Kubernetes, but you&amp;rsquo;re overwhelmed by the multitude of deployment options available? Judging by the length of the Picking the Right Solution section to the Kubernetes docs, it&amp;rsquo;s safe to assume that you&amp;rsquo;re not alone. Even after you&amp;rsquo;ve made it past the provisioning stage, you then need to learn how to administrate what is a very complex system. In short; Kubernetes is not easy.</description>
    </item>
    
    <item>
      <title>Ansible Node Bootstrapping</title>
      <link>https://dickingwithdocker.com/posts/ansible-node-bootstrapping/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://dickingwithdocker.com/posts/ansible-node-bootstrapping/</guid>
      <description>When you receive a new server, there are a variety of pre-requisites required before Ansible can be used to administrate the host.
Below is my own personal playbook which works for both Debian and RedHat (and derivative) systems.
--- # ansible-playbook bootstrap-ansible-target.yml -b -e &amp;#39;user=user&amp;#39; - hosts: &amp;#34;{{ host }}&amp;#34; remote_user: &amp;#34;{{ user | default(&amp;#39;root&amp;#39;) }}&amp;#34; gather_facts: no pre_tasks: - name: attempt to update apt&amp;#39;s cache raw: test -e /usr/bin/apt-get &amp;amp;&amp;amp; apt-get update ignore_errors: yes - name: attempt to install Python on Debian-based systems raw: test -e /usr/bin/apt-get &amp;amp;&amp;amp; apt-get -y install python-simplejson python ignore_errors: yes - name: attempt to install Python on CentOS-based systems raw: test -e /usr/bin/yum &amp;amp;&amp;amp; yum -y install python-simplejson python ignore_errors: yes - setup: tasks: - name: Create admin user group group: name: admin system: yes state: present - name: Ensure sudo is installed package: name: sudo state: present - name: Create Ansible user user: name: ansible shell: /bin/bash comment: &amp;#34;Ansible management user&amp;#34; home: /home/ansible createhome: yes - name: Add Ansible user to admin group user: name: ansible groups: admin append: yes - name: Add authorized key authorized_key: user: ansible state: present key: &amp;#34;{{ lookup(&amp;#39;file&amp;#39;, &amp;#39;/etc/ansible/.</description>
    </item>
    
  </channel>
</rss>
